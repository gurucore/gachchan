{"mappings":";;;;;;AAKO,MAAM;IACX;;;;GAIC,GACD,OAAO,6BAA6B,IAAW,EAAE;QAC/C,IAAI,CAAC,MAAM,OAAO,IAAI;QAEtB,IAAI,MAAM,KAAK,WAAW,GAAG,QAAQ,KAAK,AAAC,CAAA,KAAK,QAAQ,KAAK,CAAA,EAAG,QAAQ,GAAG,QAAQ,CAAC,GAAG,OAAO,KAAK,OAAO,GAAG,QAAQ,GAAG,QAAQ,CAAC,GAAG;QAEpI,OAAO;IACT;IAEA;;;;;;GAMC,GACD,OAAO,6BAA6B,IAAW,EAAU;QACvD,IAAI,CAAC,MAAM,OAAO,IAAI;QAEtB,IAAI,4BAA4B,KAAK,QAAQ,GAAG,QAAQ,GAAG,QAAQ,CAAC,GAAG,OAAO,KAAK,KAAK,UAAU,GAAG,QAAQ,GAAG,QAAQ,CAAC,GAAG;QAE5H,OAAO;IACT;IAEA;;;;GAIC,GACD,OAAO,oCAAoC,IAAW,EAAE;QACtD,IAAI,CAAC,MAAM,OAAO,IAAI;QAEtB,IAAI,MAAM,IAAI,CAAC,4BAA4B,CAAC,QAAQ,KAAK,UAAU,GAAG,QAAQ,GAAG,QAAQ,CAAC,GAAG;QAE7F,OAAO;IACT;IAEA;;;GAGC,GACD,OAAO,gCAAgC,IAAW,EAAE;QAClD,IAAI,CAAC,MAAM,OAAO,IAAI;QAEtB,OAAO,KAAK,WAAW,GAAG,SAAS,CAAC,GAAG,IAAI,OAAO,CAAC,MAAM;IAC3D;IAEA;;;GAGC,GACD,OAAO,gCAAgC,IAAW,EAAE;QAClD,IAAI,CAAC,MAAM,OAAO,IAAI;QAEtB,OAAO,KAAK,WAAW,GAAG,SAAS,CAAC,IAAI,IAAI,OAAO,CAAC,MAAM;IAC5D;IACA;;;GAGC,GACD,OAAO,uCAAuC,IAAW,EAAE;QACzD,IAAI,CAAC,MAAM,OAAO,IAAI;QAEtB,OAAO,KAAK,WAAW,GAAG,SAAS,CAAC,IAAI,IAAI,OAAO,CAAC,MAAM;IAC5D;IAEA,0FAA0F,GAC1F,OAAO,yBAAyB;QAC9B,OAAO,IAAI,OAAO,WAAW,GAAG,OAAO,CAAC,MAAM;IAChD;IAEA;;;;;;GAMC,GACD,OAAO,qBAAqB,UAAU,OAAO,EAAE,WAAW,aAAa,EAAE;QACvE,OAAO,IAAI,KAAK,cAAc,CAAC,SAAS;YACtC,EAAE;YACF,UAAU;YACV,WAAW;YACX,WAAW;YACX,QAAQ;QACV,GAAU,MAAM,CAAC,IAAI;IACvB;IAEA,yGAAyG,GACzG,OAAO,qBAAqB,UAAU,CAAC,EAAE;QACvC,MAAM,MAAM,IAAI;QAEhB,2CAA2C;QAE3C,MAAM,YACJ,qDAAqD;QACrD,IAAI,iBAAiB,KACrB,kCAAkC;QAClC;QAEF,MAAM,4BAA4B,IAAI,KAAK,IAAI,OAAO,KAAK,YAAY,UAAA,SAAsB,qCAAqC;;QAClI,OAAO;IACT;AACF","sources":["src/helper/DateTimeHelper.ts"],"sourcesContent":["ï»¿import _flatten from 'lodash/flatten.js'\r\nimport _isNumber from 'lodash/isNumber.js'\r\nimport _intersectionWith from 'lodash/intersectionWith.js'\r\nimport _intersection from 'lodash/intersection.js'\r\n\r\nexport class DateTimeHelper {\r\n  /**\r\n   * if now is 2002 12 31 14:22, this return 20021231.\r\n   * @param {Date} date\r\n   * @returns {string}\r\n   */\r\n  static GetCurrentYearMonthDayString(date?: Date) {\r\n    if (!date) date = new Date()\r\n\r\n    let ret = date.getFullYear().toString() + (date.getMonth() + 1).toString().padStart(2, '0') + date.getDate().toString().padStart(2, '0')\r\n\r\n    return ret\r\n  }\r\n\r\n  /**\r\n   * if now is 14:22, this return 1422.\r\n   * 9:40AM ==> 0940\r\n   * 16:03 (PM) ==> 1603\r\n   * @param {Date} date\r\n   * @returns {string}\r\n   */\r\n  static GetCurrentHoursMinutesString(date?: Date): string {\r\n    if (!date) date = new Date()\r\n\r\n    let currentHoursMinutesString = date.getHours().toString().padStart(2, '0') + '' + date.getMinutes().toString().padStart(2, '0')\r\n\r\n    return currentHoursMinutesString\r\n  }\r\n\r\n  /**\r\n   * if now is 14:22:59, this return 142259.\r\n   * 9:40AM ==> 094000\r\n   * 16:03 (PM) ==> 160300\r\n   */\r\n  static GetCurrentHoursMinutesSecondsString(date?: Date) {\r\n    if (!date) date = new Date()\r\n\r\n    let ret = this.GetCurrentHoursMinutesString(date) + date.getSeconds().toString().padStart(2, '0')\r\n\r\n    return ret\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns string the Date string in format yyyyMMdd (in UTC timezone)\r\n   */\r\n  static GetCurrentYearMonthDayStringUTC(date?: Date) {\r\n    if (!date) date = new Date()\r\n\r\n    return date.toISOString().substring(0, 10).replace(/-/g, '')\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns string the Time string in format HHmm (in UTC timezone)\r\n   */\r\n  static GetCurrentHoursMinutesStringUTC(date?: Date) {\r\n    if (!date) date = new Date()\r\n\r\n    return date.toISOString().substring(11, 16).replace(/:/g, '')\r\n  }\r\n  /**\r\n   *\r\n   * @returns string the Time string in format HHmmss (in UTC timezone)\r\n   */\r\n  static GetCurrentHoursMinutesSecondsStringUTC(date?: Date) {\r\n    if (!date) date = new Date()\r\n\r\n    return date.toISOString().substring(11, 19).replace(/:/g, '')\r\n  }\r\n\r\n  /** full yearmonthdaytime string in UTC timezone, without \":\" char (safe for file naming) */\r\n  static getCurrentISOStringUTC() {\r\n    return new Date().toISOString().replace(/:/g, '')\r\n  }\r\n\r\n  /**\r\n   * return current date time in full format, in specific culture (language) and timezone.\r\n   * new Date().toLocaleString(\"vi-VN\", { timezone: \"Asia/Saigon\", hour12: false })\r\n   * @param {*} culture\r\n   * @param {*} timezone\r\n   * @returns\r\n   */\r\n  static GetDatetimeNowString(culture = 'vi-VN', timezone = 'Asia/Saigon') {\r\n    return new Intl.DateTimeFormat(culture, {\r\n      //\r\n      timeZone: timezone,\r\n      dateStyle: 'full',\r\n      timeStyle: 'long',\r\n      hour12: false,\r\n    } as any).format(new Date())\r\n  }\r\n\r\n  /** return the DateTime object like it was get with `new Date()` in a host computer in expected timezone */\r\n  static GetTimeInGMTTimezone(gmtHour = 7) {\r\n    const now = new Date()\r\n\r\n    // Adjust for user's local time zone offset\r\n\r\n    const utcOffset =\r\n      // when calling this in GMT+7, it return -420 minutes\r\n      now.getTimezoneOffset() *\r\n      // Convert minutes to milliseconds\r\n      60000\r\n\r\n    const timeInExpectedGMTTimezone = new Date(now.getTime() + utcOffset + gmtHour * 60 * 60000) // gmtHour = 7, Add 7 hours for GMT+7\r\n    return timeInExpectedGMTTimezone\r\n  }\r\n}\r\n"],"names":[],"version":3,"file":"DateTimeHelper.bd0d294e.js.map"}