{"mappings":"AAAA;AAMO,MAAM;IACX,qGAAqG;IACrG,aAAc;IACZ,WAAW;IACb;IAEA,WAAW,YAAY;QACrB,OAAO;IACT;IAEA;;;GAGC,GACD,OAAO,WAAW,IAAW,EAAE,IAAW,EAAE;QAC1C,SAAS,WAAW,KAAU,EAAE,KAAa,EAAE,IAAW;YACxD,OAAO,KAAK,OAAO,CAAC,WAAW;QACjC;QAEA,IAAI,uBAAuB,KAAK,MAAM,CAAC,MAAM,MAAM,CAAC;QACpD,OAAO;IACT;IAEA;;;;;;;;GAQC,GACD,OAAO,SAAS,YAAoB,EAAE,SAAmB,EAAE;QACzD,IAAI,SAAmB,EAAE;QAEzB,IAAI,CAAC,gBAAgB,CAAC,aAAa,CAAC,MAAM,OAAO,CAAC,YAChD,mDAAmD;QACnD,OAAO;QAGT,MAAM,iBAAiB,aAAa,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,IAAM,EAAE,IAAI;QAEhE,yCAAyC;QACzC,IAAI,UAAU,OAAO,CAAC,IAAI,CAAC,SAAS,KAAK,GAAG;YAC1C,SAAS,eAAe,iCAAiC;;YACzD,OAAO;QACT;QAEA,mDAAmD;QACnD,KAAK,IAAI,eAAe,eACtB,IAAI,UAAU,OAAO,CAAC,gBAAgB,GACpC,6BAA6B;QAC7B,OAAO,IAAI,CAAC;QAIhB,OAAO;IACT;AACF","sources":["src/helper/AuthHelper.ts"],"sourcesContent":["ï»¿\"use strict\"\r\n\r\n/**\r\n * Util class, no state, to provide Util method to work with Roles, User, token\r\n * This can be used in web, api (nodejs), so make it totally decouple, follow SOLID principle\r\n */\r\nexport class AuthHelper {\r\n  // if there is a constructor present in subclass, it needs to first call super() before using \"this\".\r\n  constructor() {\r\n    // super();\r\n  }\r\n\r\n  static get ADMINROLE() {\r\n    return \"admin\"\r\n  }\r\n\r\n  /**\r\n   * merge 2 arrays of roles and reduce to distinct\r\n   * [1,2,3] & [2, 3, 4] ==> return [1,2,3,4]\r\n   */\r\n  static mergeRoles(arr1: any[], arr2: any[]) {\r\n    function onlyUnique(value: any, index: number, self: any[]) {\r\n      return self.indexOf(value) === index\r\n    }\r\n\r\n    let distinctArrayOfRoles = arr1.concat(arr2).filter(onlyUnique)\r\n    return distinctArrayOfRoles\r\n  }\r\n\r\n  /**\r\n   * return array of accepted roles. Admin (this.ADMINROLE) will have all roles accepted.\r\n   * Examples: given \"crm,advisor\", if user has \"crm\", this returns [crm] only\r\n   * given \"crm,advisor\", if user has \"admin\", this returns [crm,advisor]\r\n   *\r\n   * @param requireRoles required roles, to say user is qualified\r\n   * @param userRoles roles of user, to validate with requireRoles\r\n   * @returns array of satisfy roles\r\n   */\r\n  static hasRoles(requireRoles: string, userRoles: string[]) {\r\n    let arrRet: string[] = []\r\n\r\n    if (!requireRoles || !userRoles || !Array.isArray(userRoles)) {\r\n      // throw Error(\"require: requireRoles, userRoles\");\r\n      return arrRet\r\n    }\r\n\r\n    const arrStringRoles = requireRoles.split(\",\").map((r) => r.trim())\r\n\r\n    // check admin first, admin has all roles\r\n    if (userRoles.indexOf(this.ADMINROLE) >= 0) {\r\n      arrRet = arrStringRoles // all required roles are satisfy\r\n      return arrRet\r\n    }\r\n\r\n    // arrStringRoles == [admin,newseditor,advisor,crm]\r\n    for (let roleToCheck of arrStringRoles) {\r\n      if (userRoles.indexOf(roleToCheck) >= 0) {\r\n        // current user has this role\r\n        arrRet.push(roleToCheck)\r\n      }\r\n    }\r\n\r\n    return arrRet\r\n  } // end func\r\n}\r\n"],"names":[],"version":3,"file":"AuthHelper.1754e82b.js.map"}